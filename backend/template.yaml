AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  consult

  Sample SAM Template for consult

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20
    Layers:
      - !Ref ConsultLayer
Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Stage name (dev|qa|uat|prod).
    AllowedValues:
      - dev
      - qa
      - uat
      - prod
  CognitoDomainName:
    Type: String
    Default: consult-dev
    Description: Cognito domain name.
  CognitoCallbakURL:
    Type: String
    Default: http://localhost:4200
    Description: Cognito OAuth2 callback URL.
  CognitoLogoutURL:
    Type: String
    Default: http://localhost:4200/logout
    Description: Cognito OAuth2 logout URL.
Resources:
  RatingsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions:
        - AttributeName: sku
          AttributeType: S
        - AttributeName: version
          AttributeType: N
        - AttributeName: date
          AttributeType: N
        #- AttributeName: aggregated
        #  AttributeType: N
        #- AttributeName: quantity
        #  AttributeType: N
      KeySchema: 
        - AttributeName: sku
          KeyType: HASH
        - AttributeName: version
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: LSIDate
          KeySchema:
            - AttributeName: sku
              KeyType: HASH
            - AttributeName: date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      TableName: "ratings"
  UserRatingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: sku
          AttributeType: S
        # Most recent reviews will have user starting with 'v0-', this will make sorting a lot easier and cheaper
        - AttributeName: user
          AttributeType: S
        - AttributeName: rating
          AttributeType: N
        - AttributeName: date
          AttributeType: N
        #- AttributeName: review
        #  AttributeType: S
        #- AttributeName: version
        #  AttributeType: N
      KeySchema: 
        - AttributeName: sku
          KeyType: HASH
        - AttributeName: user
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: LSIDate
          KeySchema:
            - AttributeName: sku
              KeyType: HASH
            - AttributeName: date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      GlobalSecondaryIndexes:
        - IndexName: GSIRating
          KeySchema:
            - AttributeName: user
              KeyType: HASH
            - AttributeName: rating
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - sku
              - date
              # should review be stored in this index? Would it be better to have it available on rare occasions,
              # or save some space but make extra get requests if we need it?
              #- review
      BillingMode: PAY_PER_REQUEST
      TableName: "user_ratings"
  ConsultUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1 # Documentation says it's not mandatory, but deployment fails when not explicitly set
      AdminCreateUserConfig: 
          AllowAdminCreateUserOnly: false
      MfaConfiguration: "OFF"
      Policies: 
        PasswordPolicy: 
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
          TemporaryPasswordValidityDays: 14
      Schema: 
        - AttributeDataType: String
          DeveloperOnlyAttribute: False
          Mutable: False
          Name: name
          Required: True
        - AttributeDataType: String
          DeveloperOnlyAttribute: False
          Mutable: False
          Name: family_name
          Required: True
      UsernameAttributes:
        - email
      UsernameConfiguration: 
        CaseSensitive: false
  ConsultUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain 
    Properties:
      UserPoolId: !Ref ConsultUserPool 
      Domain: !Ref CognitoDomainName
  ConsultUserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties: 
      Identifier: consult
      Name: Consult API
      Scopes: 
        - ScopeName: write_rating
          ScopeDescription: Write user rating.
      UserPoolId: !Ref ConsultUserPool
  ConsultUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      #AccessTokenValidity: Integer
      AllowedOAuthFlows: 
        - code
      AllowedOAuthScopes: 
        - openid
        - consult/write_rating
      CallbackURLs: 
        - !Ref CognitoCallbakURL
      #ClientName: String
      EnableTokenRevocation: true
      IdTokenValidity: 1
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: hours
      LogoutURLs: 
        - !Ref CognitoLogoutURL
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 72
      UserPoolId: !Ref ConsultUserPool
      SupportedIdentityProviders:
        - COGNITO
  ConsultApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      FailOnWarnings: true
      StageName: !Ref Stage
      # This doesn't seem to work well at the moment
      # https://github.com/aws/aws-sam-cli/issues/2359 and https://github.com/aws/aws-sam-cli/issues/2410
      Auth:
        Authorizers:
          ConsultAuthorizer:
            IdentitySource: "$request.header.Authorization"
            AuthorizationScopes:
              - consult/write_rating
            JwtConfiguration:
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/{ConsultUserPool}"
                #- UserPoolId: !Ref ConsultUserPool
              audience:
                - !Ref ConsultUserPoolClient
  ConsultLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: consult-layer
      CompatibleRuntimes:
        - java11
    Metadata:
      BuildMethod: java11
  ConsultGetRatingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: rating-function
      Handler: com.lucaspetrini.consult.RatingHandler::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Policies: AmazonDynamoDBFullAccess
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          DYNAMO_REGION: eu-west-1
          DYNAMO_NAME: ratingsdb
      Events:
        ConsultRatingGetApi:
          Type: HttpApi
          Properties:
            Path: /ratings/{code}
            Method: get
            ApiId: !Ref ConsultApi
  ConsultGetUserRatingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-rating-function
      Handler: com.lucaspetrini.consult.UserRatingHandler::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          DYNAMO_REGION: eu-west-1
          DYNAMO_NAME: userratingsdb
      Events:
        ConsultUserRatingGetApi:
          Type: HttpApi
          Properties:
            Path: /users/{id}/ratings/{code}
            Method: get
            ApiId: !Ref ConsultApi
  # We could use the same function for PUT and GET
  ConsultPutUserRatingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-rating-function
      Handler: com.lucaspetrini.consult.UserRatingHandler::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          DYNAMO_REGION: eu-west-1
          DYNAMO_NAME: userratingsdb
      Events:
        ConsultUserRatingPutApi:
          Type: HttpApi
          Properties:
            Path: /users/{id}/ratings/{code}
            Method: put
            ApiId: !Ref ConsultApi
            Auth:
              Authorizer: ConsultAuthorizer
              AuthorizationScopes:
                - consult/write_rating

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ConsultRatingApi:
    Description: "API Gateway endpoint URL for ConsultRating function"
    Value: !Sub "https://${ConsultApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/ratings/{code}"
  ConsultUserRatingApi:
    Description: "API Gateway endpoint URL for ConsultUserRating function"
    Value: !Sub "https://${ConsultApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/users/{id}/ratings/{code}"
  ConsultSSOLoginURL:
    Description: "Amazon Cognito endpoint for OAuth2 SSO with PKCE"
    Value: !Sub "https://${CognitoDomainName}.auth.${AWS::Region}.amazoncognito.com/authorize?response_type=code&client_id=${ConsultUserPoolClient}&code_challenge={codeChallenge}&code_challenge_method=S256&redirect_uri=${CognitoCallbakURL}&scope=consult/write_rating&audience=consult&state={state}"
  ConsultGetRatingFunction:
    Description: "Get Rating Function ARN"
    Value: !GetAtt ConsultGetRatingFunction.Arn
  ConsultGetRatingFunctionIamRole:
    Description: "Implicit IAM Role created for Get Rating function"
    Value: !GetAtt ConsultGetRatingFunctionRole.Arn
  ConsultGetUserRatingFunction:
    Description: "Get User Rating Function ARN"
    Value: !GetAtt ConsultGetUserRatingFunction.Arn
  ConsultGetUserRatingFunctionIamRole:
    Description: "Implicit IAM Role created for Get User Rating function"
    Value: !GetAtt ConsultGetUserRatingFunctionRole.Arn
  ConsultPutUserRatingFunction:
    Description: "Put User Rating Function ARN"
    Value: !GetAtt ConsultPutUserRatingFunction.Arn
  ConsultPutUserRatingFunctionIamRole:
    Description: "Implicit IAM Role created for Put User Rating function"
    Value: !GetAtt ConsultPutUserRatingFunctionRole.Arn
